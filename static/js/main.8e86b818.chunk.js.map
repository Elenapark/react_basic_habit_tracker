{"version":3,"sources":["components/habit.jsx","components/input.jsx","components/habits.jsx","components/navbar.jsx","components/reset.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","this","name","count","className","onClick","PureComponent","Input","inputRef","React","createRef","onSubmit","event","preventDefault","current","value","onAdd","ref","type","placeholder","Habits","handleAdd","habitName","habits","map","id","Component","Navbar","totalCount","Reset","onReset","App","state","item","setState","filter","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e86b818.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\n\nclass Habit extends PureComponent {\n  handleIncrement = () => {\n    // state object 안의 count를 증가시킨뒤 state를 update해야함\n    // just this.state.count ++ 를 해버리면 react가 변경상태를 인지하지 못하므로\n    // state를 업데이트 할때는 꼭 react 함수인 setState를 이용해서 아래와 같이 작성해야함\n    // this.setState({ count: this.state.count + 1 });\n    this.props.onIncrement(this.props.habit);\n  };\n\n  handleDecrement = () => {\n    // if (this.state.count === 0) {\n    //   return;\n    // }\n    // const count = this.state.count - 1;\n    // this.setState({ count: count < 0 ? 0 : count });\n    this.props.onDecrement(this.props.habit);\n  };\n\n  handleDelete = () => {\n    this.props.onDelete(this.props.habit);\n  };\n\n  render() {\n    const { name, count } = this.props.habit;\n    return (\n      <li className=\"habit\">\n        <span className=\"habit-name\">{name}</span>\n        <span className=\"habit-count\">{count}</span>\n        <button\n          className=\"habit-button habit-increase\"\n          onClick={this.handleIncrement}\n        >\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-decrease\"\n          onClick={this.handleDecrement}\n        >\n          <i className=\"fas fa-minus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-delete\"\n          onClick={this.handleDelete}\n        >\n          <i className=\"fas fa-trash\"></i>\n        </button>\n      </li>\n    );\n  }\n}\n\nexport default Habit;\n","import React, { PureComponent } from \"react\";\n\nclass Input extends PureComponent {\n  // React에서 inputValue를 알아오는 방법\n  inputRef = React.createRef();\n\n  onSubmit = (event) => {\n    event.preventDefault();\n    const name = this.inputRef.current.value;\n    name && this.props.onAdd(name);\n    this.inputRef.current.value = \"\";\n  };\n\n  render() {\n    return (\n      <form className=\"input\" onSubmit={this.onSubmit}>\n        <input\n          ref={this.inputRef}\n          type=\"text\"\n          className=\"input-field\"\n          placeholder=\"Habit\"\n        />\n        <button className=\"input-button\">Add</button>\n      </form>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport Habit from \"./habit\";\nimport Input from \"./input\";\n\nclass Habits extends Component {\n  handleIncrement = (habit) => {\n    this.props.onIncrement(habit);\n  };\n\n  handleDecrement = (habit) => {\n    this.props.onDecrement(habit);\n  };\n\n  handleDelete = (habit) => {\n    this.props.onDelete(habit);\n  };\n\n  handleAdd = (habitName) => {\n    this.props.onAdd(habitName);\n  };\n\n  render() {\n    return (\n      <>\n        <Input onAdd={this.handleAdd} />\n        <ul>\n          {this.props.habits.map((habit) => (\n            <Habit\n              key={habit.id}\n              habit={habit}\n              onIncrement={this.handleIncrement}\n              onDecrement={this.handleDecrement}\n              onDelete={this.handleDelete}\n            />\n          ))}\n        </ul>\n      </>\n    );\n  }\n}\n\nexport default Habits;\n","import React, { PureComponent } from \"react\";\n\nclass Navbar extends PureComponent {\n  render() {\n    return (\n      <nav className=\"navbar\">\n        <i className=\"fas fa-leaf\"></i>\n        <span className=\"navbar-title\">Habit Tracker</span>\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass Reset extends Component {\n  render() {\n    return (\n      <>\n        <button className=\"reset-button\" onClick={this.props.onReset}>\n          Reset All\n        </button>\n      </>\n    );\n  }\n}\n\nexport default Reset;\n","import React, { Component } from \"react\";\nimport \"./app.css\";\nimport Habits from \"./components/habits\";\nimport Navbar from \"./components/navbar\";\nimport Reset from \"./components/reset\";\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: \"Reading\", count: 0 },\n      { id: 2, name: \"Running\", count: 0 },\n      { id: 3, name: \"Baking\", count: 0 },\n    ],\n  };\n\n  handleIncrement = (habit) => {\n    // const count = habit.count++;\n    // this.setState({ count: count });\n\n    // **** React에서는 state object를 직접적으로 수정하는 것이 매우 좋지 않다\n    // 따라서 위의 코드보다는 아래와 같이 spread operator를 이용하여 새로 array를 복제하여 진행하는 것이 좋음\n\n    // ******** 새로운 오브젝트를 복제하여 그 오브젝트 자체를 수정하는 이유는 그래야 react가 업데이트 사항이 있는 것으로\n    // 알고 업데이트를 진행하기 때문.. (오브젝트 자체가 아닌 오브젝트의 데이터만 바뀌는 것을 인지하지 못함 = shallow comparison!)\n    /*\n    const habits = [...this.state.habits];\n    const index = habits.indexOf(habit);\n    habits[index].count++;\n    // this.setState({habits : habits}); key와 value가 동일한 이름인 경우 하나로 축약해서 사용\n    this.setState({ habits });\n    */\n\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 };\n      }\n      return item;\n    });\n\n    this.setState({ habits });\n  };\n\n  handleDecrement = (habit) => {\n    /*\n    const habits = [...this.state.habits];\n    const index = habits.indexOf(habit);\n    const count = habits[index].count - 1;\n    habits[index].count = count < 0 ? 0 : count;\n    this.setState({ habits });\n    */\n\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    // 누른 habit의 id가 아닌 요소들만 모아서 다시 배열을 만듦\n    const habits = this.state.habits.filter((item) => item.id !== habit.id);\n    this.setState({ habits });\n  };\n\n  handleAdd = (habitName) => {\n    // 새로 만든 habit을 기존 리스트에 추가하는 코드\n    const habits = [\n      ...this.state.habits,\n      { id: Date.now(), name: habitName, count: 0 },\n    ];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map((habit) => {\n      /*\n      habit.count = 0;\n      return habit;\n      */\n      if (habit.count !== 0) {\n        return { ...habit, count: 0 };\n      }\n      return habit;\n    });\n    this.setState({ habits });\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar\n          totalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n        />\n        <Reset onReset={this.handleReset} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\n\n// 아래 코드는 react를 html과 연결해주는 역할만 하는 javascript.\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}